// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cartoon.proto

#include "Cartoon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Cartoon::Cartoon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(nullptr)
  , id_(0){}
struct CartoonDefaultTypeInternal {
  constexpr CartoonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartoonDefaultTypeInternal() {}
  union {
    Cartoon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartoonDefaultTypeInternal _Cartoon_default_instance_;
constexpr CartoonList::CartoonList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cartoonlist_(){}
struct CartoonListDefaultTypeInternal {
  constexpr CartoonListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartoonListDefaultTypeInternal() {}
  union {
    CartoonList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartoonListDefaultTypeInternal _CartoonList_default_instance_;
constexpr CartoonRequest::CartoonRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cartoon_(nullptr)
  , query_(0)
  , selectbyid_(0)
  , selectall_(false){}
struct CartoonRequestDefaultTypeInternal {
  constexpr CartoonRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartoonRequestDefaultTypeInternal() {}
  union {
    CartoonRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartoonRequestDefaultTypeInternal _CartoonRequest_default_instance_;
constexpr CartoonResponse::CartoonResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cartoon_(nullptr){}
struct CartoonResponseDefaultTypeInternal {
  constexpr CartoonResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartoonResponseDefaultTypeInternal() {}
  union {
    CartoonResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartoonResponseDefaultTypeInternal _CartoonResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Cartoon_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Cartoon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Cartoon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Cartoon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cartoon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Cartoon, id_),
  PROTOBUF_FIELD_OFFSET(::Cartoon, name_),
  PROTOBUF_FIELD_OFFSET(::Cartoon, company_),
  PROTOBUF_FIELD_OFFSET(::Cartoon, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CartoonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CartoonList, cartoonlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CartoonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CartoonRequest, query_),
  PROTOBUF_FIELD_OFFSET(::CartoonRequest, cartoon_),
  PROTOBUF_FIELD_OFFSET(::CartoonRequest, selectbyid_),
  PROTOBUF_FIELD_OFFSET(::CartoonRequest, selectall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CartoonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CartoonResponse, res_),
  PROTOBUF_FIELD_OFFSET(::CartoonResponse, cartoon_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Cartoon)},
  { 9, -1, sizeof(::CartoonList)},
  { 15, -1, sizeof(::CartoonRequest)},
  { 24, -1, sizeof(::CartoonResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Cartoon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CartoonList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CartoonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CartoonResponse_default_instance_),
};

const char descriptor_table_protodef_Cartoon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rCartoon.proto\032\037google/protobuf/timesta"
  "mp.proto\"^\n\007Cartoon\022\n\n\002Id\030\001 \001(\005\022\014\n\004name\030"
  "\002 \001(\t\022\017\n\007company\030\003 \001(\t\022(\n\004time\030\004 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\",\n\013CartoonList\022"
  "\035\n\013cartoonList\030\001 \003(\0132\010.Cartoon\"e\n\016Cartoo"
  "nRequest\022\r\n\005query\030\001 \001(\005\022\035\n\007cartoon\030\002 \001(\013"
  "2\014.CartoonList\022\022\n\nselectById\030\003 \001(\005\022\021\n\tse"
  "lectAll\030\004 \001(\010\"=\n\017CartoonResponse\022\013\n\003res\030"
  "\001 \001(\t\022\035\n\007cartoon\030\002 \001(\0132\014.CartoonListb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Cartoon_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Cartoon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cartoon_2eproto = {
  false, false, 364, descriptor_table_protodef_Cartoon_2eproto, "Cartoon.proto", 
  &descriptor_table_Cartoon_2eproto_once, descriptor_table_Cartoon_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_Cartoon_2eproto::offsets,
  file_level_metadata_Cartoon_2eproto, file_level_enum_descriptors_Cartoon_2eproto, file_level_service_descriptors_Cartoon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Cartoon_2eproto_getter() {
  return &descriptor_table_Cartoon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Cartoon_2eproto(&descriptor_table_Cartoon_2eproto);

// ===================================================================

class Cartoon::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Cartoon* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Cartoon::_Internal::time(const Cartoon* msg) {
  return *msg->time_;
}
void Cartoon::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Cartoon::Cartoon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cartoon)
}
Cartoon::Cartoon(const Cartoon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company().empty()) {
    company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Cartoon)
}

inline void Cartoon::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(id_));
}

Cartoon::~Cartoon() {
  // @@protoc_insertion_point(destructor:Cartoon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cartoon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
}

void Cartoon::ArenaDtor(void* object) {
  Cartoon* _this = reinterpret_cast< Cartoon* >(object);
  (void)_this;
}
void Cartoon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cartoon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cartoon::Clear() {
// @@protoc_insertion_point(message_clear_start:Cartoon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  company_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cartoon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cartoon.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cartoon.company"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cartoon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cartoon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cartoon.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string company = 3;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cartoon.company");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_company(), target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cartoon)
  return target;
}

size_t Cartoon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cartoon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string company = 3;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cartoon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cartoon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cartoon::GetClassData() const { return &_class_data_; }

void Cartoon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Cartoon *>(to)->MergeFrom(
      static_cast<const Cartoon &>(from));
}


void Cartoon::MergeFrom(const Cartoon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cartoon)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_company().empty()) {
    _internal_set_company(from._internal_company());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cartoon::CopyFrom(const Cartoon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cartoon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cartoon::IsInitialized() const {
  return true;
}

void Cartoon::InternalSwap(Cartoon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_, GetArenaForAllocation(),
      &other->company_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cartoon, id_)
      + sizeof(Cartoon::id_)
      - PROTOBUF_FIELD_OFFSET(Cartoon, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cartoon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cartoon_2eproto_getter, &descriptor_table_Cartoon_2eproto_once,
      file_level_metadata_Cartoon_2eproto[0]);
}

// ===================================================================

class CartoonList::_Internal {
 public:
};

CartoonList::CartoonList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cartoonlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CartoonList)
}
CartoonList::CartoonList(const CartoonList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cartoonlist_(from.cartoonlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CartoonList)
}

inline void CartoonList::SharedCtor() {
}

CartoonList::~CartoonList() {
  // @@protoc_insertion_point(destructor:CartoonList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CartoonList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CartoonList::ArenaDtor(void* object) {
  CartoonList* _this = reinterpret_cast< CartoonList* >(object);
  (void)_this;
}
void CartoonList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartoonList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartoonList::Clear() {
// @@protoc_insertion_point(message_clear_start:CartoonList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cartoonlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartoonList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Cartoon cartoonList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cartoonlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartoonList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CartoonList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Cartoon cartoonList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cartoonlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cartoonlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CartoonList)
  return target;
}

size_t CartoonList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CartoonList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Cartoon cartoonList = 1;
  total_size += 1UL * this->_internal_cartoonlist_size();
  for (const auto& msg : this->cartoonlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CartoonList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CartoonList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CartoonList::GetClassData() const { return &_class_data_; }

void CartoonList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CartoonList *>(to)->MergeFrom(
      static_cast<const CartoonList &>(from));
}


void CartoonList::MergeFrom(const CartoonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CartoonList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cartoonlist_.MergeFrom(from.cartoonlist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CartoonList::CopyFrom(const CartoonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CartoonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartoonList::IsInitialized() const {
  return true;
}

void CartoonList::InternalSwap(CartoonList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cartoonlist_.InternalSwap(&other->cartoonlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CartoonList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cartoon_2eproto_getter, &descriptor_table_Cartoon_2eproto_once,
      file_level_metadata_Cartoon_2eproto[1]);
}

// ===================================================================

class CartoonRequest::_Internal {
 public:
  static const ::CartoonList& cartoon(const CartoonRequest* msg);
};

const ::CartoonList&
CartoonRequest::_Internal::cartoon(const CartoonRequest* msg) {
  return *msg->cartoon_;
}
CartoonRequest::CartoonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CartoonRequest)
}
CartoonRequest::CartoonRequest(const CartoonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cartoon()) {
    cartoon_ = new ::CartoonList(*from.cartoon_);
  } else {
    cartoon_ = nullptr;
  }
  ::memcpy(&query_, &from.query_,
    static_cast<size_t>(reinterpret_cast<char*>(&selectall_) -
    reinterpret_cast<char*>(&query_)) + sizeof(selectall_));
  // @@protoc_insertion_point(copy_constructor:CartoonRequest)
}

inline void CartoonRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cartoon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selectall_) -
    reinterpret_cast<char*>(&cartoon_)) + sizeof(selectall_));
}

CartoonRequest::~CartoonRequest() {
  // @@protoc_insertion_point(destructor:CartoonRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CartoonRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cartoon_;
}

void CartoonRequest::ArenaDtor(void* object) {
  CartoonRequest* _this = reinterpret_cast< CartoonRequest* >(object);
  (void)_this;
}
void CartoonRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartoonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartoonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CartoonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cartoon_ != nullptr) {
    delete cartoon_;
  }
  cartoon_ = nullptr;
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selectall_) -
      reinterpret_cast<char*>(&query_)) + sizeof(selectall_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartoonRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CartoonList cartoon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartoon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selectById = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          selectbyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool selectAll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          selectall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartoonRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CartoonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query = 1;
  if (this->_internal_query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_query(), target);
  }

  // .CartoonList cartoon = 2;
  if (this->_internal_has_cartoon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cartoon(this), target, stream);
  }

  // int32 selectById = 3;
  if (this->_internal_selectbyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_selectbyid(), target);
  }

  // bool selectAll = 4;
  if (this->_internal_selectall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_selectall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CartoonRequest)
  return target;
}

size_t CartoonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CartoonRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CartoonList cartoon = 2;
  if (this->_internal_has_cartoon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cartoon_);
  }

  // int32 query = 1;
  if (this->_internal_query() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_query());
  }

  // int32 selectById = 3;
  if (this->_internal_selectbyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selectbyid());
  }

  // bool selectAll = 4;
  if (this->_internal_selectall() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CartoonRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CartoonRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CartoonRequest::GetClassData() const { return &_class_data_; }

void CartoonRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CartoonRequest *>(to)->MergeFrom(
      static_cast<const CartoonRequest &>(from));
}


void CartoonRequest::MergeFrom(const CartoonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CartoonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cartoon()) {
    _internal_mutable_cartoon()->::CartoonList::MergeFrom(from._internal_cartoon());
  }
  if (from._internal_query() != 0) {
    _internal_set_query(from._internal_query());
  }
  if (from._internal_selectbyid() != 0) {
    _internal_set_selectbyid(from._internal_selectbyid());
  }
  if (from._internal_selectall() != 0) {
    _internal_set_selectall(from._internal_selectall());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CartoonRequest::CopyFrom(const CartoonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CartoonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartoonRequest::IsInitialized() const {
  return true;
}

void CartoonRequest::InternalSwap(CartoonRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartoonRequest, selectall_)
      + sizeof(CartoonRequest::selectall_)
      - PROTOBUF_FIELD_OFFSET(CartoonRequest, cartoon_)>(
          reinterpret_cast<char*>(&cartoon_),
          reinterpret_cast<char*>(&other->cartoon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartoonRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cartoon_2eproto_getter, &descriptor_table_Cartoon_2eproto_once,
      file_level_metadata_Cartoon_2eproto[2]);
}

// ===================================================================

class CartoonResponse::_Internal {
 public:
  static const ::CartoonList& cartoon(const CartoonResponse* msg);
};

const ::CartoonList&
CartoonResponse::_Internal::cartoon(const CartoonResponse* msg) {
  return *msg->cartoon_;
}
CartoonResponse::CartoonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CartoonResponse)
}
CartoonResponse::CartoonResponse(const CartoonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res().empty()) {
    res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cartoon()) {
    cartoon_ = new ::CartoonList(*from.cartoon_);
  } else {
    cartoon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CartoonResponse)
}

inline void CartoonResponse::SharedCtor() {
res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cartoon_ = nullptr;
}

CartoonResponse::~CartoonResponse() {
  // @@protoc_insertion_point(destructor:CartoonResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CartoonResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cartoon_;
}

void CartoonResponse::ArenaDtor(void* object) {
  CartoonResponse* _this = reinterpret_cast< CartoonResponse* >(object);
  (void)_this;
}
void CartoonResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartoonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartoonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CartoonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && cartoon_ != nullptr) {
    delete cartoon_;
  }
  cartoon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartoonResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CartoonResponse.res"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CartoonList cartoon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartoon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartoonResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CartoonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string res = 1;
  if (!this->_internal_res().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res().data(), static_cast<int>(this->_internal_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CartoonResponse.res");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_res(), target);
  }

  // .CartoonList cartoon = 2;
  if (this->_internal_has_cartoon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cartoon(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CartoonResponse)
  return target;
}

size_t CartoonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CartoonResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res = 1;
  if (!this->_internal_res().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res());
  }

  // .CartoonList cartoon = 2;
  if (this->_internal_has_cartoon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cartoon_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CartoonResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CartoonResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CartoonResponse::GetClassData() const { return &_class_data_; }

void CartoonResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CartoonResponse *>(to)->MergeFrom(
      static_cast<const CartoonResponse &>(from));
}


void CartoonResponse::MergeFrom(const CartoonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CartoonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res().empty()) {
    _internal_set_res(from._internal_res());
  }
  if (from._internal_has_cartoon()) {
    _internal_mutable_cartoon()->::CartoonList::MergeFrom(from._internal_cartoon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CartoonResponse::CopyFrom(const CartoonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CartoonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartoonResponse::IsInitialized() const {
  return true;
}

void CartoonResponse::InternalSwap(CartoonResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &res_, GetArenaForAllocation(),
      &other->res_, other->GetArenaForAllocation()
  );
  swap(cartoon_, other->cartoon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CartoonResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cartoon_2eproto_getter, &descriptor_table_Cartoon_2eproto_once,
      file_level_metadata_Cartoon_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Cartoon* Arena::CreateMaybeMessage< ::Cartoon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cartoon >(arena);
}
template<> PROTOBUF_NOINLINE ::CartoonList* Arena::CreateMaybeMessage< ::CartoonList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CartoonList >(arena);
}
template<> PROTOBUF_NOINLINE ::CartoonRequest* Arena::CreateMaybeMessage< ::CartoonRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CartoonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CartoonResponse* Arena::CreateMaybeMessage< ::CartoonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CartoonResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
