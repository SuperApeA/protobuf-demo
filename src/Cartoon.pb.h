// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cartoon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cartoon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Cartoon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Cartoon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Cartoon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cartoon_2eproto;
class Cartoon;
struct CartoonDefaultTypeInternal;
extern CartoonDefaultTypeInternal _Cartoon_default_instance_;
class CartoonList;
struct CartoonListDefaultTypeInternal;
extern CartoonListDefaultTypeInternal _CartoonList_default_instance_;
class CartoonRequest;
struct CartoonRequestDefaultTypeInternal;
extern CartoonRequestDefaultTypeInternal _CartoonRequest_default_instance_;
class CartoonResponse;
struct CartoonResponseDefaultTypeInternal;
extern CartoonResponseDefaultTypeInternal _CartoonResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Cartoon* Arena::CreateMaybeMessage<::Cartoon>(Arena*);
template<> ::CartoonList* Arena::CreateMaybeMessage<::CartoonList>(Arena*);
template<> ::CartoonRequest* Arena::CreateMaybeMessage<::CartoonRequest>(Arena*);
template<> ::CartoonResponse* Arena::CreateMaybeMessage<::CartoonResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Cartoon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cartoon) */ {
 public:
  inline Cartoon() : Cartoon(nullptr) {}
  ~Cartoon() override;
  explicit constexpr Cartoon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cartoon(const Cartoon& from);
  Cartoon(Cartoon&& from) noexcept
    : Cartoon() {
    *this = ::std::move(from);
  }

  inline Cartoon& operator=(const Cartoon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cartoon& operator=(Cartoon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cartoon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cartoon* internal_default_instance() {
    return reinterpret_cast<const Cartoon*>(
               &_Cartoon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cartoon& a, Cartoon& b) {
    a.Swap(&b);
  }
  inline void Swap(Cartoon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cartoon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cartoon* New() const final {
    return new Cartoon();
  }

  Cartoon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cartoon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cartoon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cartoon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cartoon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cartoon";
  }
  protected:
  explicit Cartoon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCompanyFieldNumber = 3,
    kTimeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string company = 3;
  void clear_company();
  const std::string& company() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company();
  PROTOBUF_MUST_USE_RESULT std::string* release_company();
  void set_allocated_company(std::string* company);
  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(const std::string& value);
  std::string* _internal_mutable_company();
  public:

  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // int32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cartoon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cartoon_2eproto;
};
// -------------------------------------------------------------------

class CartoonList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CartoonList) */ {
 public:
  inline CartoonList() : CartoonList(nullptr) {}
  ~CartoonList() override;
  explicit constexpr CartoonList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartoonList(const CartoonList& from);
  CartoonList(CartoonList&& from) noexcept
    : CartoonList() {
    *this = ::std::move(from);
  }

  inline CartoonList& operator=(const CartoonList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartoonList& operator=(CartoonList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartoonList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartoonList* internal_default_instance() {
    return reinterpret_cast<const CartoonList*>(
               &_CartoonList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CartoonList& a, CartoonList& b) {
    a.Swap(&b);
  }
  inline void Swap(CartoonList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartoonList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartoonList* New() const final {
    return new CartoonList();
  }

  CartoonList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartoonList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CartoonList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CartoonList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartoonList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CartoonList";
  }
  protected:
  explicit CartoonList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCartoonListFieldNumber = 1,
  };
  // repeated .Cartoon cartoonList = 1;
  int cartoonlist_size() const;
  private:
  int _internal_cartoonlist_size() const;
  public:
  void clear_cartoonlist();
  ::Cartoon* mutable_cartoonlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cartoon >*
      mutable_cartoonlist();
  private:
  const ::Cartoon& _internal_cartoonlist(int index) const;
  ::Cartoon* _internal_add_cartoonlist();
  public:
  const ::Cartoon& cartoonlist(int index) const;
  ::Cartoon* add_cartoonlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cartoon >&
      cartoonlist() const;

  // @@protoc_insertion_point(class_scope:CartoonList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cartoon > cartoonlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cartoon_2eproto;
};
// -------------------------------------------------------------------

class CartoonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CartoonRequest) */ {
 public:
  inline CartoonRequest() : CartoonRequest(nullptr) {}
  ~CartoonRequest() override;
  explicit constexpr CartoonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartoonRequest(const CartoonRequest& from);
  CartoonRequest(CartoonRequest&& from) noexcept
    : CartoonRequest() {
    *this = ::std::move(from);
  }

  inline CartoonRequest& operator=(const CartoonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartoonRequest& operator=(CartoonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartoonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartoonRequest* internal_default_instance() {
    return reinterpret_cast<const CartoonRequest*>(
               &_CartoonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CartoonRequest& a, CartoonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CartoonRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartoonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartoonRequest* New() const final {
    return new CartoonRequest();
  }

  CartoonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartoonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CartoonRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CartoonRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartoonRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CartoonRequest";
  }
  protected:
  explicit CartoonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCartoonFieldNumber = 2,
    kQueryFieldNumber = 1,
    kSelectByIdFieldNumber = 3,
    kSelectAllFieldNumber = 4,
  };
  // .CartoonList cartoon = 2;
  bool has_cartoon() const;
  private:
  bool _internal_has_cartoon() const;
  public:
  void clear_cartoon();
  const ::CartoonList& cartoon() const;
  PROTOBUF_MUST_USE_RESULT ::CartoonList* release_cartoon();
  ::CartoonList* mutable_cartoon();
  void set_allocated_cartoon(::CartoonList* cartoon);
  private:
  const ::CartoonList& _internal_cartoon() const;
  ::CartoonList* _internal_mutable_cartoon();
  public:
  void unsafe_arena_set_allocated_cartoon(
      ::CartoonList* cartoon);
  ::CartoonList* unsafe_arena_release_cartoon();

  // int32 query = 1;
  void clear_query();
  ::PROTOBUF_NAMESPACE_ID::int32 query() const;
  void set_query(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query() const;
  void _internal_set_query(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selectById = 3;
  void clear_selectbyid();
  ::PROTOBUF_NAMESPACE_ID::int32 selectbyid() const;
  void set_selectbyid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selectbyid() const;
  void _internal_set_selectbyid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool selectAll = 4;
  void clear_selectall();
  bool selectall() const;
  void set_selectall(bool value);
  private:
  bool _internal_selectall() const;
  void _internal_set_selectall(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CartoonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CartoonList* cartoon_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_;
  ::PROTOBUF_NAMESPACE_ID::int32 selectbyid_;
  bool selectall_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cartoon_2eproto;
};
// -------------------------------------------------------------------

class CartoonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CartoonResponse) */ {
 public:
  inline CartoonResponse() : CartoonResponse(nullptr) {}
  ~CartoonResponse() override;
  explicit constexpr CartoonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartoonResponse(const CartoonResponse& from);
  CartoonResponse(CartoonResponse&& from) noexcept
    : CartoonResponse() {
    *this = ::std::move(from);
  }

  inline CartoonResponse& operator=(const CartoonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartoonResponse& operator=(CartoonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartoonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartoonResponse* internal_default_instance() {
    return reinterpret_cast<const CartoonResponse*>(
               &_CartoonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CartoonResponse& a, CartoonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CartoonResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartoonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartoonResponse* New() const final {
    return new CartoonResponse();
  }

  CartoonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartoonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CartoonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CartoonResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartoonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CartoonResponse";
  }
  protected:
  explicit CartoonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
    kCartoonFieldNumber = 2,
  };
  // string res = 1;
  void clear_res();
  const std::string& res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res();
  PROTOBUF_MUST_USE_RESULT std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  // .CartoonList cartoon = 2;
  bool has_cartoon() const;
  private:
  bool _internal_has_cartoon() const;
  public:
  void clear_cartoon();
  const ::CartoonList& cartoon() const;
  PROTOBUF_MUST_USE_RESULT ::CartoonList* release_cartoon();
  ::CartoonList* mutable_cartoon();
  void set_allocated_cartoon(::CartoonList* cartoon);
  private:
  const ::CartoonList& _internal_cartoon() const;
  ::CartoonList* _internal_mutable_cartoon();
  public:
  void unsafe_arena_set_allocated_cartoon(
      ::CartoonList* cartoon);
  ::CartoonList* unsafe_arena_release_cartoon();

  // @@protoc_insertion_point(class_scope:CartoonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  ::CartoonList* cartoon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cartoon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cartoon

// int32 Id = 1;
inline void Cartoon::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cartoon::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cartoon::id() const {
  // @@protoc_insertion_point(field_get:Cartoon.Id)
  return _internal_id();
}
inline void Cartoon::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Cartoon::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Cartoon.Id)
}

// string name = 2;
inline void Cartoon::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Cartoon::name() const {
  // @@protoc_insertion_point(field_get:Cartoon.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cartoon::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cartoon.name)
}
inline std::string* Cartoon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Cartoon.name)
  return _s;
}
inline const std::string& Cartoon::_internal_name() const {
  return name_.Get();
}
inline void Cartoon::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Cartoon::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Cartoon::release_name() {
  // @@protoc_insertion_point(field_release:Cartoon.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Cartoon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Cartoon.name)
}

// string company = 3;
inline void Cartoon::clear_company() {
  company_.ClearToEmpty();
}
inline const std::string& Cartoon::company() const {
  // @@protoc_insertion_point(field_get:Cartoon.company)
  return _internal_company();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cartoon::set_company(ArgT0&& arg0, ArgT... args) {
 
 company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cartoon.company)
}
inline std::string* Cartoon::mutable_company() {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:Cartoon.company)
  return _s;
}
inline const std::string& Cartoon::_internal_company() const {
  return company_.Get();
}
inline void Cartoon::_internal_set_company(const std::string& value) {
  
  company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Cartoon::_internal_mutable_company() {
  
  return company_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Cartoon::release_company() {
  // @@protoc_insertion_point(field_release:Cartoon.company)
  return company_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Cartoon::set_allocated_company(std::string* company) {
  if (company != nullptr) {
    
  } else {
    
  }
  company_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Cartoon.company)
}

// .google.protobuf.Timestamp time = 4;
inline bool Cartoon::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Cartoon::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cartoon::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Cartoon::time() const {
  // @@protoc_insertion_point(field_get:Cartoon.time)
  return _internal_time();
}
inline void Cartoon::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cartoon.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cartoon::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cartoon::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:Cartoon.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cartoon::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Cartoon::mutable_time() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:Cartoon.time)
  return _msg;
}
inline void Cartoon::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:Cartoon.time)
}

// -------------------------------------------------------------------

// CartoonList

// repeated .Cartoon cartoonList = 1;
inline int CartoonList::_internal_cartoonlist_size() const {
  return cartoonlist_.size();
}
inline int CartoonList::cartoonlist_size() const {
  return _internal_cartoonlist_size();
}
inline void CartoonList::clear_cartoonlist() {
  cartoonlist_.Clear();
}
inline ::Cartoon* CartoonList::mutable_cartoonlist(int index) {
  // @@protoc_insertion_point(field_mutable:CartoonList.cartoonList)
  return cartoonlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cartoon >*
CartoonList::mutable_cartoonlist() {
  // @@protoc_insertion_point(field_mutable_list:CartoonList.cartoonList)
  return &cartoonlist_;
}
inline const ::Cartoon& CartoonList::_internal_cartoonlist(int index) const {
  return cartoonlist_.Get(index);
}
inline const ::Cartoon& CartoonList::cartoonlist(int index) const {
  // @@protoc_insertion_point(field_get:CartoonList.cartoonList)
  return _internal_cartoonlist(index);
}
inline ::Cartoon* CartoonList::_internal_add_cartoonlist() {
  return cartoonlist_.Add();
}
inline ::Cartoon* CartoonList::add_cartoonlist() {
  ::Cartoon* _add = _internal_add_cartoonlist();
  // @@protoc_insertion_point(field_add:CartoonList.cartoonList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cartoon >&
CartoonList::cartoonlist() const {
  // @@protoc_insertion_point(field_list:CartoonList.cartoonList)
  return cartoonlist_;
}

// -------------------------------------------------------------------

// CartoonRequest

// int32 query = 1;
inline void CartoonRequest::clear_query() {
  query_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartoonRequest::_internal_query() const {
  return query_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartoonRequest::query() const {
  // @@protoc_insertion_point(field_get:CartoonRequest.query)
  return _internal_query();
}
inline void CartoonRequest::_internal_set_query(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  query_ = value;
}
inline void CartoonRequest::set_query(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:CartoonRequest.query)
}

// .CartoonList cartoon = 2;
inline bool CartoonRequest::_internal_has_cartoon() const {
  return this != internal_default_instance() && cartoon_ != nullptr;
}
inline bool CartoonRequest::has_cartoon() const {
  return _internal_has_cartoon();
}
inline void CartoonRequest::clear_cartoon() {
  if (GetArenaForAllocation() == nullptr && cartoon_ != nullptr) {
    delete cartoon_;
  }
  cartoon_ = nullptr;
}
inline const ::CartoonList& CartoonRequest::_internal_cartoon() const {
  const ::CartoonList* p = cartoon_;
  return p != nullptr ? *p : reinterpret_cast<const ::CartoonList&>(
      ::_CartoonList_default_instance_);
}
inline const ::CartoonList& CartoonRequest::cartoon() const {
  // @@protoc_insertion_point(field_get:CartoonRequest.cartoon)
  return _internal_cartoon();
}
inline void CartoonRequest::unsafe_arena_set_allocated_cartoon(
    ::CartoonList* cartoon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cartoon_);
  }
  cartoon_ = cartoon;
  if (cartoon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CartoonRequest.cartoon)
}
inline ::CartoonList* CartoonRequest::release_cartoon() {
  
  ::CartoonList* temp = cartoon_;
  cartoon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CartoonList* CartoonRequest::unsafe_arena_release_cartoon() {
  // @@protoc_insertion_point(field_release:CartoonRequest.cartoon)
  
  ::CartoonList* temp = cartoon_;
  cartoon_ = nullptr;
  return temp;
}
inline ::CartoonList* CartoonRequest::_internal_mutable_cartoon() {
  
  if (cartoon_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartoonList>(GetArenaForAllocation());
    cartoon_ = p;
  }
  return cartoon_;
}
inline ::CartoonList* CartoonRequest::mutable_cartoon() {
  ::CartoonList* _msg = _internal_mutable_cartoon();
  // @@protoc_insertion_point(field_mutable:CartoonRequest.cartoon)
  return _msg;
}
inline void CartoonRequest::set_allocated_cartoon(::CartoonList* cartoon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cartoon_;
  }
  if (cartoon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CartoonList>::GetOwningArena(cartoon);
    if (message_arena != submessage_arena) {
      cartoon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartoon, submessage_arena);
    }
    
  } else {
    
  }
  cartoon_ = cartoon;
  // @@protoc_insertion_point(field_set_allocated:CartoonRequest.cartoon)
}

// int32 selectById = 3;
inline void CartoonRequest::clear_selectbyid() {
  selectbyid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartoonRequest::_internal_selectbyid() const {
  return selectbyid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartoonRequest::selectbyid() const {
  // @@protoc_insertion_point(field_get:CartoonRequest.selectById)
  return _internal_selectbyid();
}
inline void CartoonRequest::_internal_set_selectbyid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selectbyid_ = value;
}
inline void CartoonRequest::set_selectbyid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selectbyid(value);
  // @@protoc_insertion_point(field_set:CartoonRequest.selectById)
}

// bool selectAll = 4;
inline void CartoonRequest::clear_selectall() {
  selectall_ = false;
}
inline bool CartoonRequest::_internal_selectall() const {
  return selectall_;
}
inline bool CartoonRequest::selectall() const {
  // @@protoc_insertion_point(field_get:CartoonRequest.selectAll)
  return _internal_selectall();
}
inline void CartoonRequest::_internal_set_selectall(bool value) {
  
  selectall_ = value;
}
inline void CartoonRequest::set_selectall(bool value) {
  _internal_set_selectall(value);
  // @@protoc_insertion_point(field_set:CartoonRequest.selectAll)
}

// -------------------------------------------------------------------

// CartoonResponse

// string res = 1;
inline void CartoonResponse::clear_res() {
  res_.ClearToEmpty();
}
inline const std::string& CartoonResponse::res() const {
  // @@protoc_insertion_point(field_get:CartoonResponse.res)
  return _internal_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CartoonResponse::set_res(ArgT0&& arg0, ArgT... args) {
 
 res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CartoonResponse.res)
}
inline std::string* CartoonResponse::mutable_res() {
  std::string* _s = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:CartoonResponse.res)
  return _s;
}
inline const std::string& CartoonResponse::_internal_res() const {
  return res_.Get();
}
inline void CartoonResponse::_internal_set_res(const std::string& value) {
  
  res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CartoonResponse::_internal_mutable_res() {
  
  return res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CartoonResponse::release_res() {
  // @@protoc_insertion_point(field_release:CartoonResponse.res)
  return res_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CartoonResponse::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CartoonResponse.res)
}

// .CartoonList cartoon = 2;
inline bool CartoonResponse::_internal_has_cartoon() const {
  return this != internal_default_instance() && cartoon_ != nullptr;
}
inline bool CartoonResponse::has_cartoon() const {
  return _internal_has_cartoon();
}
inline void CartoonResponse::clear_cartoon() {
  if (GetArenaForAllocation() == nullptr && cartoon_ != nullptr) {
    delete cartoon_;
  }
  cartoon_ = nullptr;
}
inline const ::CartoonList& CartoonResponse::_internal_cartoon() const {
  const ::CartoonList* p = cartoon_;
  return p != nullptr ? *p : reinterpret_cast<const ::CartoonList&>(
      ::_CartoonList_default_instance_);
}
inline const ::CartoonList& CartoonResponse::cartoon() const {
  // @@protoc_insertion_point(field_get:CartoonResponse.cartoon)
  return _internal_cartoon();
}
inline void CartoonResponse::unsafe_arena_set_allocated_cartoon(
    ::CartoonList* cartoon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cartoon_);
  }
  cartoon_ = cartoon;
  if (cartoon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CartoonResponse.cartoon)
}
inline ::CartoonList* CartoonResponse::release_cartoon() {
  
  ::CartoonList* temp = cartoon_;
  cartoon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CartoonList* CartoonResponse::unsafe_arena_release_cartoon() {
  // @@protoc_insertion_point(field_release:CartoonResponse.cartoon)
  
  ::CartoonList* temp = cartoon_;
  cartoon_ = nullptr;
  return temp;
}
inline ::CartoonList* CartoonResponse::_internal_mutable_cartoon() {
  
  if (cartoon_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartoonList>(GetArenaForAllocation());
    cartoon_ = p;
  }
  return cartoon_;
}
inline ::CartoonList* CartoonResponse::mutable_cartoon() {
  ::CartoonList* _msg = _internal_mutable_cartoon();
  // @@protoc_insertion_point(field_mutable:CartoonResponse.cartoon)
  return _msg;
}
inline void CartoonResponse::set_allocated_cartoon(::CartoonList* cartoon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cartoon_;
  }
  if (cartoon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CartoonList>::GetOwningArena(cartoon);
    if (message_arena != submessage_arena) {
      cartoon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartoon, submessage_arena);
    }
    
  } else {
    
  }
  cartoon_ = cartoon;
  // @@protoc_insertion_point(field_set_allocated:CartoonResponse.cartoon)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Cartoon_2eproto
